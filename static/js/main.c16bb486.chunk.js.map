{"version":3,"sources":["utilities/initial-data/initialAlgorithmParameters.ts","utilities/context/AppContext.ts","utilities/hooks/useAppContext.ts","components/DragAndDropUpload.tsx","components/FileReadingAndDataParsing.tsx","components/PerformAlgorithm.tsx","components/PlotData.tsx","components/ConfigureAlgorithmParameters.tsx","components/GeneratedInformation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialAlgorithmParameters","shouldCorrectWithBiasRotM","frequency","assumedConstantVelocity","biasTimeCutOff","timeCutOff","initialAppContext","zipFile","undefined","setZipFile","rotationMatrixData","setRotationMatrixData","generatedDisplacement","setGeneratedDisplacement","dataRevision","setDataRevision","algorithmParameters","setAlgorithmParameters","AppContext","createContext","useAppContext","useContext","DragAndDropUpload","useState","isDragging","setIsDragging","dragCounter","setDragCounter","className","onDragEnter","event","preventDefault","stopPropagation","onDragLeave","newDragCounter","onDragOver","onDrop","dataTransfer","items","length","files","clearData","name","htmlFor","id","type","onChange","target","FileReadingAndDataParsing","unzippedFiles","setUnzippedFiles","useEffect","JSZip","loadAsync","then","unzipped","a","Promise","all","Object","values","map","file","async","fileContent","date","content","newUnzippedFiles","matrixFile","find","includes","rowStrings","split","splice","time","rotationMatrix","count","i","row","e","parseFloat","push","rotationMatrixArray","j","matrixRow","matrix","PerformAlgorithm","onClick","useCallback","biasRowIndexCutoff","multiply","stationaryRotM","slice","stationaryRotMSum","reduce","accumulator","current","add","zeros","meanStationaryRotM","divide","inverseMeanStationaryRotM","inv","biasCorrectionRotM","subset","index","console","log","rowIndexCutOffStart","findIndex","t","rowIndexCutOffEnd","slicedTime","slicedRotM","adjustedTime","subtract","distance","positions","p1","d","R","aggregateRotM","travelVector","p2","displacement","pArray","toArray","flat","range","PlotData","showPlots","useMemo","parsedDisplacement","sampleSize","size","x","y","z","useResizeHandler","revision","config","responsive","data","mode","line","color","layout","autosize","title","xaxis","autorange","yaxis","width","scene","camera","eye","aspectmode","dragmode","ConfigureAlgorithmParameters","checked","min","max","value","parseInt","GeneratedInformation","info","travelTime","startPoint","endPoint","enumeratePoint","point","c","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c16bb486.chunk.js","sourcesContent":["import { AlgorithmParameters } from 'models/AlgorithmParameters';\n\nexport const initialAlgorithmParameters: AlgorithmParameters = {\n  shouldCorrectWithBiasRotM: true,\n  frequency: 50,\n  assumedConstantVelocity: 0.15,\n  biasTimeCutOff: [0, 30],\n  timeCutOff: [30, 60],\n};\n","import { createContext, Dispatch, SetStateAction } from 'react';\n\nimport { RotationMatrixData } from 'models/RotationMatrixData';\nimport { Displacement } from 'models/Displacement';\nimport { AlgorithmParameters } from 'models/AlgorithmParameters';\n\nimport { initialAlgorithmParameters } from '../initial-data/initialAlgorithmParameters';\n\ntype AppContext = {\n  zipFile: File | undefined;\n  setZipFile: Dispatch<SetStateAction<File | undefined>>;\n  rotationMatrixData: RotationMatrixData | undefined;\n  setRotationMatrixData: Dispatch<\n    SetStateAction<RotationMatrixData | undefined>\n  >;\n  generatedDisplacement: Displacement | undefined;\n  setGeneratedDisplacement: Dispatch<SetStateAction<Displacement | undefined>>;\n  dataRevision: number;\n  setDataRevision: Dispatch<SetStateAction<number>>;\n  algorithmParameters: AlgorithmParameters;\n  setAlgorithmParameters: Dispatch<SetStateAction<AlgorithmParameters>>;\n};\n\nconst initialAppContext: AppContext = {\n  zipFile: undefined,\n  setZipFile: () => {},\n  rotationMatrixData: undefined,\n  setRotationMatrixData: () => {},\n  generatedDisplacement: undefined,\n  setGeneratedDisplacement: () => {},\n  dataRevision: 0,\n  setDataRevision: () => {},\n  algorithmParameters: initialAlgorithmParameters,\n  setAlgorithmParameters: () => {},\n};\n\nexport const AppContext = createContext(initialAppContext);\n","import { useContext } from 'react';\nimport { AppContext } from 'utilities/context';\n\nexport const useAppContext = () => useContext(AppContext);\n","import React, {\n  ChangeEventHandler,\n  DragEventHandler,\n  FC,\n  useState,\n} from 'react';\n\nimport { useAppContext } from 'utilities/hooks';\n\ninterface UploadZipProps {}\n\nexport const DragAndDropUpload: FC<UploadZipProps> = () => {\n  const { zipFile, setZipFile } = useAppContext();\n\n  const onFileChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    if (event.target.files != null) {\n      setZipFile(event.target.files[0]);\n    }\n  };\n\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragCounter, setDragCounter] = useState<number>(0);\n\n  const onDragEnter: DragEventHandler<HTMLDivElement> = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragging(true);\n    setDragCounter((dragCounter) => dragCounter + 1);\n  };\n\n  const onDragLeave: DragEventHandler<HTMLDivElement> = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const newDragCounter = dragCounter - 1;\n    if (newDragCounter === 0) setIsDragging(false);\n    setDragCounter(newDragCounter);\n  };\n\n  const onDragOver: DragEventHandler<HTMLDivElement> = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const onDrop: DragEventHandler<HTMLDivElement> = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (event.dataTransfer.items && event.dataTransfer.items.length > 0) {\n      setZipFile(event.dataTransfer.files[0]);\n      event.dataTransfer.clearData();\n      setDragCounter(0);\n    }\n    setIsDragging(false);\n  };\n\n  return (\n    <div\n      className={\n        'w-full h-64 border-2 border-gray-600 border-dashed rounded-lg flex flex-col items-center justify-center text-center relative overflow-hidden'\n      }\n      onDragEnter={onDragEnter}\n      onDragLeave={onDragLeave}\n      onDragOver={onDragOver}\n      onDrop={onDrop}>\n      {isDragging ? (\n        <div\n          className={\n            'absolute inset-0 z-10 bg-gray-300 bg-opacity-75 flex items-center justify-center'\n          }>\n          <p>Drop me!</p>\n        </div>\n      ) : null}\n\n      <p className={'font-medium text-gray-400'}>\n        {typeof zipFile !== 'undefined'\n          ? `${zipFile.name}`\n          : `Drop a .zip file`}{' '}\n      </p>\n\n      <div className={'mt-3'}>\n        <label htmlFor=\"file\" className={'text-xs button cursor-pointer'}>\n          {typeof zipFile === 'undefined'\n            ? `Choose a file`\n            : `Choose another file`}\n        </label>\n        <input\n          id=\"file\"\n          className={'hidden'}\n          type=\"file\"\n          onChange={onFileChange}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport JSZip from 'jszip';\nimport { matrix, Matrix } from 'mathjs';\nimport { useAppContext } from '../utilities/hooks';\n\ninterface FileReadingAndDataParsingProps {}\n\ntype UnzippedFile = {\n  name: string;\n  date: Date;\n  content: string;\n};\n\nexport const FileReadingAndDataParsing: FC<FileReadingAndDataParsingProps> = () => {\n  const {\n    zipFile,\n    setRotationMatrixData,\n    setGeneratedDisplacement,\n  } = useAppContext();\n\n  const [unzippedFiles, setUnzippedFiles] = useState<Array<UnzippedFile>>([]);\n\n  useEffect(() => {\n    if (typeof zipFile !== 'undefined') {\n      const zip = new JSZip();\n      zip.loadAsync(zipFile).then(async (unzipped) => {\n        const newUnzippedFiles: Array<UnzippedFile> = await Promise.all(\n          Object.values(unzipped.files).map(async (file) => {\n            const fileContent = await file.async('text');\n            return {\n              name: file.name,\n              date: file.date,\n              content: fileContent,\n            };\n          }),\n        );\n        setUnzippedFiles(newUnzippedFiles);\n      });\n    }\n  }, [zipFile]);\n\n  useEffect(() => {\n    if (typeof unzippedFiles !== 'undefined') {\n      const matrixFile = unzippedFiles.find(({ name }) =>\n        name.includes('matrix.csv'),\n      );\n      if (typeof matrixFile !== 'undefined') {\n        // remove\n        const rowStrings = matrixFile.content.split('\\n');\n        // remove headers, and the last row which is just an empty string\n        rowStrings.splice(0, 1);\n        rowStrings.splice(rowStrings.length - 1, 1);\n        // parse data\n        const time: Array<number> = [];\n        const rotationMatrix: Array<Matrix> = [];\n        const count = rowStrings.length;\n        for (let i = 0; i < count; i++) {\n          const rowString = rowStrings.splice(0, 1)[0];\n          const row = rowString.split(',').map((e) => parseFloat(e));\n          time.push(row.splice(0, 1)[0]);\n          const rotationMatrixArray: Array<Array<number>> = [];\n          for (let j = 0; j < 3; j++) {\n            const matrixRow = row.splice(0, 3);\n            rotationMatrixArray.push(matrixRow);\n          }\n          rotationMatrix.push(matrix(rotationMatrixArray));\n        }\n        setRotationMatrixData({ time, rotationMatrix });\n        // reset generated displacement data to undefined\n        setGeneratedDisplacement(undefined);\n      }\n    }\n  }, [unzippedFiles, setRotationMatrixData, setGeneratedDisplacement]);\n\n  return <></>;\n};\n","import React, { FC, useCallback } from 'react';\nimport {\n  index,\n  matrix,\n  multiply,\n  add,\n  divide,\n  subtract,\n  inv,\n  zeros,\n  range,\n  Matrix,\n} from 'mathjs';\n\nimport { useAppContext } from 'utilities/hooks';\n\ninterface PerformAlgorithmProps {}\n\nexport const PerformAlgorithm: FC<PerformAlgorithmProps> = () => {\n  const {\n    rotationMatrixData,\n    setGeneratedDisplacement,\n    setDataRevision,\n    algorithmParameters,\n  } = useAppContext();\n\n  const onClick = useCallback(() => {\n    if (typeof rotationMatrixData !== 'undefined') {\n      // perform algorithm\n      const { time, rotationMatrix } = rotationMatrixData;\n\n      // parameters\n      const {\n        shouldCorrectWithBiasRotM,\n        frequency,\n        assumedConstantVelocity,\n        biasTimeCutOff,\n        timeCutOff,\n      } = algorithmParameters;\n\n      // obtain rotation matrix for bias correction\n      const biasRowIndexCutoff = multiply(biasTimeCutOff, frequency);\n      const stationaryRotM = rotationMatrix.slice(\n        biasRowIndexCutoff[0],\n        biasRowIndexCutoff[1],\n      );\n      const stationaryRotMSum = stationaryRotM.reduce(\n        (accumulator, current) => add(accumulator, current) as Matrix,\n        zeros(3, 3),\n      );\n      const meanStationaryRotM = divide(\n        stationaryRotMSum,\n        stationaryRotM.length,\n      ) as Matrix;\n      const inverseMeanStationaryRotM = inv(meanStationaryRotM);\n      const biasCorrectionRotM = inverseMeanStationaryRotM.subset(\n        index(2, [0, 1, 2]),\n        [0, 0, 1],\n      );\n      console.log({\n        meanStationaryRotM,\n        inverseMeanStationaryRotM,\n        biasCorrectionRotM,\n      });\n\n      // remove first and last few seconds of data\n      const rowIndexCutOffStart = time.findIndex((t) => t > timeCutOff[0]);\n      const rowIndexCutOffEnd = time.findIndex(\n        (t) => t > timeCutOff[1],\n        rowIndexCutOffStart,\n      );\n      const slicedTime = time.slice(rowIndexCutOffStart, rowIndexCutOffEnd);\n      const slicedRotM = rotationMatrix.slice(\n        rowIndexCutOffStart,\n        rowIndexCutOffEnd,\n      );\n\n      // adjust time due to cut off\n      const adjustedTime = subtract(slicedTime, slicedTime[0]) as Array<number>;\n\n      // calculate distance scalars\n      const distance = adjustedTime.map((t, index) => {\n        const v1 = assumedConstantVelocity,\n          v2 = v1;\n        const d =\n          0.5 * (v1 + v2) * (t - (index > 0 ? adjustedTime[index - 1] : 0));\n\n        return d;\n      });\n\n      // propagate position vectors\n      const positions: Array<Matrix> = [];\n      for (let i = 0; i < slicedRotM.length; i++) {\n        if (i === 0) {\n          positions.push(matrix([[0], [0], [0]]));\n          continue;\n        }\n\n        const p1 = positions[i - 1];\n        const d = distance[i];\n        const R = slicedRotM[i];\n\n        const aggregateRotM = shouldCorrectWithBiasRotM\n          ? multiply(biasCorrectionRotM, R)\n          : R;\n\n        const travelVector = multiply(aggregateRotM, matrix([[d], [0], [0]]));\n\n        const p2 = add(p1, travelVector) as Matrix;\n        positions.push(p2);\n      }\n\n      // parse into displacement data\n      const displacement = matrix([]);\n      for (let i = 0; i < positions.length; i++) {\n        const t = adjustedTime[i],\n          pArray = positions[i].toArray().flat();\n        // flip y-axis data along x = 0\n        pArray[1] = -1 * pArray[1];\n        const row = matrix([t, ...pArray]);\n        displacement.subset(index(i, range(0, 4)), row);\n      }\n\n      setGeneratedDisplacement(displacement);\n      setDataRevision((current) => current + 1);\n    }\n  }, [\n    rotationMatrixData,\n    algorithmParameters,\n    setGeneratedDisplacement,\n    setDataRevision,\n  ]);\n\n  return (\n    <>\n      {typeof rotationMatrixData !== 'undefined' ? (\n        <button className={'button'} onClick={onClick}>\n          Run Algorithm\n        </button>\n      ) : null}\n    </>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport Plot from 'react-plotly.js';\nimport { index, range, subset } from 'mathjs';\n\nimport { useAppContext } from 'utilities/hooks';\n\ninterface PlotDataProps {}\n\nexport const PlotData: FC<PlotDataProps> = () => {\n  const { generatedDisplacement, dataRevision } = useAppContext();\n\n  const showPlots = useMemo(\n    () => typeof generatedDisplacement !== 'undefined',\n    [generatedDisplacement],\n  );\n\n  const parsedDisplacement = useMemo(() => {\n    if (typeof generatedDisplacement !== 'undefined') {\n      const sampleSize = generatedDisplacement.size()[0];\n      const t = subset(generatedDisplacement, index(range(0, sampleSize), 0))\n        .toArray()\n        .flat();\n      const x = subset(generatedDisplacement, index(range(0, sampleSize), 1))\n        .toArray()\n        .flat();\n      const y = subset(generatedDisplacement, index(range(0, sampleSize), 2))\n        .toArray()\n        .flat();\n      const z = subset(generatedDisplacement, index(range(0, sampleSize), 3))\n        .toArray()\n        .flat();\n      return { t, x, y, z };\n    }\n    return { t: [], x: [], y: [], z: [] };\n  }, [generatedDisplacement]);\n\n  return (\n    <>\n      {showPlots ? (\n        <div className={'flex flex-col items-center space-y-8 px-4'}>\n          {/* dynamics */}\n          <div className={'w-full md:w-4/5 lg:w-3/5'}>\n            <Plot\n              useResizeHandler\n              revision={dataRevision}\n              className={'w-full h-full'}\n              config={{ responsive: true }}\n              data={[\n                {\n                  x: parsedDisplacement.t,\n                  y: parsedDisplacement.x,\n                  type: 'scatter',\n                  mode: 'lines',\n                  line: { color: 'red' },\n                  name: 'x',\n                },\n                {\n                  x: parsedDisplacement.t,\n                  y: parsedDisplacement.y,\n                  type: 'scatter',\n                  mode: 'lines',\n                  line: { color: 'blue' },\n                  name: 'y',\n                },\n                {\n                  x: parsedDisplacement.t,\n                  y: parsedDisplacement.z,\n                  type: 'scatter',\n                  mode: 'lines',\n                  line: { color: 'green' },\n                  name: 'z',\n                },\n              ]}\n              layout={{\n                autosize: true,\n                title: 'Dynamics',\n              }}\n            />\n          </div>\n\n          {/* 2D map and elevation */}\n          <div\n            className={\n              'w-full lg:flex lg:justify-around space-y-4 lg:space-x-4 lg:space-y-0'\n            }>\n            <Plot\n              useResizeHandler\n              revision={dataRevision}\n              className={'w-full h-full'}\n              config={{ responsive: true }}\n              data={[\n                {\n                  x: parsedDisplacement.y,\n                  y: parsedDisplacement.x,\n                  type: 'scatter',\n                  mode: 'lines',\n                  line: { color: 'red' },\n                },\n              ]}\n              layout={{\n                autosize: true,\n                title: '2D Map',\n                xaxis: { autorange: false },\n              }}\n            />\n            <Plot\n              useResizeHandler\n              revision={dataRevision}\n              className={'w-full h-full'}\n              config={{ responsive: true }}\n              data={[\n                {\n                  x: parsedDisplacement.x,\n                  y: parsedDisplacement.z,\n                  type: 'scatter',\n                  mode: 'lines',\n                  line: { color: 'blue' },\n                },\n              ]}\n              layout={{\n                autosize: true,\n                title: 'Elevation',\n                yaxis: { autorange: false },\n              }}\n            />\n          </div>\n\n          <div className={'w-full md:w-4/5 lg:w-3/5'}>\n            <Plot\n              useResizeHandler\n              revision={dataRevision}\n              className={'w-full h-full'}\n              config={{ responsive: true }}\n              data={[\n                {\n                  x: parsedDisplacement.y,\n                  y: parsedDisplacement.x,\n                  z: parsedDisplacement.z,\n                  type: 'scatter3d',\n                  mode: 'lines',\n                  line: { color: 'red', width: 4 },\n                },\n              ]}\n              layout={{\n                autosize: true,\n                title: '3D Map',\n                scene: {\n                  camera: { eye: { x: -1.25, y: -1.25, z: 1.25 } },\n                  aspectmode: 'cube',\n                  dragmode: false,\n                },\n              }}\n            />\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { useAppContext } from 'utilities/hooks';\n\ninterface ConfigureAlgorithmParametersProps {}\n\nexport const ConfigureAlgorithmParameters: FC<ConfigureAlgorithmParametersProps> = () => {\n  const { algorithmParameters, setAlgorithmParameters } = useAppContext();\n\n  return (\n    <div className={'space-y-4'}>\n      <div className={'space-x-2'}>\n        <label htmlFor={'shouldCorrectWithBiasRotM'}>\n          Should correct with bias rotation matrix\n        </label>\n        <input\n          id={'shouldCorrectWithBiasRotM'}\n          type={'checkbox'}\n          checked={algorithmParameters.shouldCorrectWithBiasRotM}\n          onChange={(e) => {\n            setAlgorithmParameters({\n              ...algorithmParameters,\n              shouldCorrectWithBiasRotM: e.target.checked,\n            });\n          }}\n        />\n      </div>\n\n      <div className={'space-x-2'}>\n        <label htmlFor={'frequency'}>Data collection frequency</label>\n        <input\n          id={'frequency'}\n          type={'number'}\n          min={1}\n          max={400}\n          value={algorithmParameters.frequency}\n          onChange={(e) => {\n            setAlgorithmParameters({\n              ...algorithmParameters,\n              frequency: parseInt(e.target.value),\n            });\n          }}\n          className={'w-40 border border-gray-600 rounded py-1 px-2'}\n        />\n      </div>\n\n      <div className={'space-x-2'}>\n        <label htmlFor={'assumedConstantVelocity'}>\n          Assumed constant velocity\n        </label>\n        <input\n          id={'assumedConstantVelocity'}\n          type={'number'}\n          min={0}\n          value={algorithmParameters.assumedConstantVelocity}\n          onChange={(e) => {\n            setAlgorithmParameters({\n              ...algorithmParameters,\n              assumedConstantVelocity: parseFloat(e.target.value),\n            });\n          }}\n          className={'w-40 border border-gray-600 rounded py-1 px-2'}\n        />\n      </div>\n\n      <div>\n        <p>Bias time cut off (seconds)</p>\n        <div className={'mt-2 flex space-x-4'}>\n          <div className={'space-x-2'}>\n            <label htmlFor={'biasTimeCutOffStart'}>Start</label>\n            <input\n              id={'biasTimeCutOffStart'}\n              type={'number'}\n              min={0}\n              value={algorithmParameters.biasTimeCutOff[0]}\n              onChange={(e) => {\n                setAlgorithmParameters({\n                  ...algorithmParameters,\n                  biasTimeCutOff: [\n                    parseFloat(e.target.value),\n                    algorithmParameters.biasTimeCutOff[1],\n                  ],\n                });\n              }}\n              className={'w-40 border border-gray-600 rounded py-1 px-2'}\n            />\n          </div>\n          <div className={'space-x-2'}>\n            <label htmlFor={'biasTimeCutOffEnd'}>End</label>\n            <input\n              id={'biasTimeCutOffEnd'}\n              type={'number'}\n              min={0}\n              value={algorithmParameters.biasTimeCutOff[1]}\n              onChange={(e) => {\n                setAlgorithmParameters({\n                  ...algorithmParameters,\n                  biasTimeCutOff: [\n                    algorithmParameters.biasTimeCutOff[0],\n                    parseFloat(e.target.value),\n                  ],\n                });\n              }}\n              className={'w-40 border border-gray-600 rounded py-1 px-2'}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <p>Useful data time cut off (seconds)</p>\n        <div className={'mt-2 flex space-x-4'}>\n          <div className={'space-x-2'}>\n            <label htmlFor={'timeCutOffStart'}>Start</label>\n            <input\n              id={'timeCutOffStart'}\n              type={'number'}\n              min={0}\n              value={algorithmParameters.timeCutOff[0]}\n              onChange={(e) => {\n                setAlgorithmParameters({\n                  ...algorithmParameters,\n                  timeCutOff: [\n                    parseFloat(e.target.value),\n                    algorithmParameters.timeCutOff[1],\n                  ],\n                });\n              }}\n              className={'w-40 border border-gray-600 rounded py-1 px-2'}\n            />\n          </div>\n          <div className={'space-x-2'}>\n            <label htmlFor={'timeCutOffEnd'}>End</label>\n            <input\n              id={'timeCutOffEnd'}\n              type={'number'}\n              min={0}\n              value={algorithmParameters.timeCutOff[1]}\n              onChange={(e) => {\n                setAlgorithmParameters({\n                  ...algorithmParameters,\n                  timeCutOff: [\n                    algorithmParameters.timeCutOff[0],\n                    parseFloat(e.target.value),\n                  ],\n                });\n              }}\n              className={'w-40 border border-gray-600 rounded py-1 px-2'}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport { index, range } from 'mathjs';\n\nimport { useAppContext } from 'utilities/hooks';\n\ninterface GeneratedInformationProps {}\n\nexport const GeneratedInformation: FC<GeneratedInformationProps> = () => {\n  const { generatedDisplacement } = useAppContext();\n\n  const info = useMemo(() => {\n    if (typeof generatedDisplacement !== 'undefined') {\n      const sampleSize = generatedDisplacement.size()[0];\n\n      const t = generatedDisplacement\n        .subset(index(range(0, sampleSize), 0))\n        .toArray()\n        .flat();\n      const travelTime = t[sampleSize - 1] - t[0];\n\n      const startPoint = generatedDisplacement\n        .subset(index(0, [1, 2, 3]))\n        .toArray() as Array<number>;\n      const endPoint = generatedDisplacement\n        .subset(index(sampleSize - 1, [1, 2, 3]))\n        .toArray() as Array<number>;\n\n      return { sampleSize, travelTime, startPoint, endPoint };\n    }\n    return {\n      sampleSize: 0,\n      travelTime: 0,\n      startPoint: [0, 0, 0],\n      endPoint: [0, 0, 0],\n    };\n  }, [generatedDisplacement]);\n\n  const enumeratePoint = (point: Array<number>): string =>\n    point.reduce((a, c, i) => (i === 0 ? `${c}` : `${a}, ${c}`), '');\n\n  return (\n    <div className={'space-y-4'}>\n      <p>Sample size: {info.sampleSize}</p>\n      <p>Travel time: {info.travelTime}</p>\n      <p>{`Start point (x,y,z): ${enumeratePoint(info.startPoint)}`}</p>\n      <p>{`End point (x,y,z): ${enumeratePoint(info.endPoint)}`}</p>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { DragAndDropUpload } from 'components/DragAndDropUpload';\nimport { FileReadingAndDataParsing } from 'components/FileReadingAndDataParsing';\nimport { PerformAlgorithm } from 'components/PerformAlgorithm';\nimport { PlotData } from 'components/PlotData';\nimport { ConfigureAlgorithmParameters } from 'components/ConfigureAlgorithmParameters';\nimport { GeneratedInformation } from 'components/GeneratedInformation';\n\nimport { RotationMatrixData } from 'models/RotationMatrixData';\nimport { Displacement } from 'models/Displacement';\nimport { AlgorithmParameters } from 'models/AlgorithmParameters';\n\nimport { AppContext } from 'utilities/context';\nimport { initialAlgorithmParameters } from 'utilities/initial-data/initialAlgorithmParameters';\n\nfunction App() {\n  const [zipFile, setZipFile] = useState<File>();\n  const [\n    rotationMatrixData,\n    setRotationMatrixData,\n  ] = useState<RotationMatrixData>();\n  const [\n    generatedDisplacement,\n    setGeneratedDisplacement,\n  ] = useState<Displacement>();\n  const [dataRevision, setDataRevision] = useState<number>(0);\n  const [\n    algorithmParameters,\n    setAlgorithmParameters,\n  ] = useState<AlgorithmParameters>(initialAlgorithmParameters);\n\n  return (\n    <AppContext.Provider\n      value={{\n        zipFile,\n        setZipFile,\n        rotationMatrixData,\n        setRotationMatrixData,\n        generatedDisplacement,\n        setGeneratedDisplacement,\n        dataRevision,\n        setDataRevision,\n        algorithmParameters,\n        setAlgorithmParameters,\n      }}>\n      <div className={'container mx-auto py-8 space-y-8'}>\n        <div className={'space-y-4'}>\n          <h3 className={'text-3xl'}>Zip File Upload</h3>\n          <DragAndDropUpload />\n        </div>\n        <div className={'space-y-4'}>\n          <h3 className={'text-3xl'}>Algorithm Parameters</h3>\n          <ConfigureAlgorithmParameters />\n        </div>\n\n        <FileReadingAndDataParsing />\n\n        <div className={'flex justify-center'}>\n          <PerformAlgorithm />\n        </div>\n\n        {typeof generatedDisplacement !== 'undefined' ? (\n          <div className={'space-y-4'}>\n            <h3 className={'text-3xl'}>Results</h3>\n            <h4 className={'text-xl'}>Information</h4>\n            <GeneratedInformation />\n            <h4 className={'text-xl'}>Plots</h4>\n            <PlotData />\n          </div>\n        ) : null}\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}